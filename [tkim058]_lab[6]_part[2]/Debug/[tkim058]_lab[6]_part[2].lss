
[tkim058]_lab[6]_part[2].elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  000004d0  00000564  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004d0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800120  00800120  00000584  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000584  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  000005f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d7d  00000000  00000000  0000067c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008cb  00000000  00000000  000013f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000068d  00000000  00000000  00001cc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000128  00000000  00000000  00002354  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000521  00000000  00000000  0000247c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000027d  00000000  00000000  0000299d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00002c1a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	c5 c0       	rjmp	.+394    	; 0x1c0 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 ed       	ldi	r30, 0xD0	; 208
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 32       	cpi	r26, 0x20	; 32
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e2       	ldi	r26, 0x20	; 32
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a9 32       	cpi	r26, 0x29	; 41
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	e3 d1       	rcall	.+966    	; 0x48a <main>
  c4:	03 c2       	rjmp	.+1030   	; 0x4cc <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <delay_ms>:
	TCCR1B = 0x00;	// bit3bit1bit0 = 000: timer off
}

void TimerISR()
{
	TimerFlag = 1;
  c8:	18 16       	cp	r1, r24
  ca:	19 06       	cpc	r1, r25
  cc:	5c f0       	brlt	.+22     	; 0xe4 <delay_ms+0x1c>
  ce:	08 95       	ret
  d0:	00 00       	nop
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	31 09       	sbc	r19, r1
  d6:	e1 f7       	brne	.-8      	; 0xd0 <delay_ms+0x8>
  d8:	4f 5f       	subi	r20, 0xFF	; 255
  da:	5f 4f       	sbci	r21, 0xFF	; 255
  dc:	84 17       	cp	r24, r20
  de:	95 07       	cpc	r25, r21
  e0:	19 f4       	brne	.+6      	; 0xe8 <delay_ms+0x20>
  e2:	08 95       	ret
  e4:	40 e0       	ldi	r20, 0x00	; 0
  e6:	50 e0       	ldi	r21, 0x00	; 0
  e8:	27 e0       	ldi	r18, 0x07	; 7
  ea:	33 e0       	ldi	r19, 0x03	; 3
  ec:	f1 cf       	rjmp	.-30     	; 0xd0 <delay_ms+0x8>

000000ee <LCD_WriteCommand>:
  ee:	5e 98       	cbi	0x0b, 6	; 11
  f0:	88 b9       	out	0x08, r24	; 8
  f2:	5f 9a       	sbi	0x0b, 7	; 11
  f4:	00 00       	nop
  f6:	5f 98       	cbi	0x0b, 7	; 11
  f8:	82 e0       	ldi	r24, 0x02	; 2
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	e5 cf       	rjmp	.-54     	; 0xc8 <delay_ms>
  fe:	08 95       	ret

00000100 <LCD_ClearScreen>:
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	f5 cf       	rjmp	.-22     	; 0xee <LCD_WriteCommand>
 104:	08 95       	ret

00000106 <LCD_Cursor>:
 106:	81 31       	cpi	r24, 0x11	; 17
 108:	18 f4       	brcc	.+6      	; 0x110 <LCD_Cursor+0xa>
 10a:	81 58       	subi	r24, 0x81	; 129
 10c:	f0 cf       	rjmp	.-32     	; 0xee <LCD_WriteCommand>
 10e:	08 95       	ret
 110:	81 55       	subi	r24, 0x51	; 81
 112:	ed cf       	rjmp	.-38     	; 0xee <LCD_WriteCommand>
 114:	08 95       	ret

00000116 <LCD_init>:
 116:	84 e6       	ldi	r24, 0x64	; 100
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	d6 df       	rcall	.-84     	; 0xc8 <delay_ms>
 11c:	88 e3       	ldi	r24, 0x38	; 56
 11e:	e7 df       	rcall	.-50     	; 0xee <LCD_WriteCommand>
 120:	86 e0       	ldi	r24, 0x06	; 6
 122:	e5 df       	rcall	.-54     	; 0xee <LCD_WriteCommand>
 124:	8f e0       	ldi	r24, 0x0F	; 15
 126:	e3 df       	rcall	.-58     	; 0xee <LCD_WriteCommand>
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	e1 df       	rcall	.-62     	; 0xee <LCD_WriteCommand>
 12c:	8a e0       	ldi	r24, 0x0A	; 10
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	cb cf       	rjmp	.-106    	; 0xc8 <delay_ms>
 132:	08 95       	ret

00000134 <LCD_WriteData>:
 134:	5e 9a       	sbi	0x0b, 6	; 11
 136:	88 b9       	out	0x08, r24	; 8
 138:	5f 9a       	sbi	0x0b, 7	; 11
 13a:	00 00       	nop
 13c:	5f 98       	cbi	0x0b, 7	; 11
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	c2 cf       	rjmp	.-124    	; 0xc8 <delay_ms>
 144:	08 95       	ret

00000146 <LCD_DisplayString>:
 146:	0f 93       	push	r16
 148:	1f 93       	push	r17
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	18 2f       	mov	r17, r24
 150:	eb 01       	movw	r28, r22
 152:	d6 df       	rcall	.-84     	; 0x100 <LCD_ClearScreen>
 154:	88 81       	ld	r24, Y
 156:	88 23       	and	r24, r24
 158:	51 f0       	breq	.+20     	; 0x16e <LCD_DisplayString+0x28>
 15a:	01 e0       	ldi	r16, 0x01	; 1
 15c:	01 0f       	add	r16, r17
 15e:	81 2f       	mov	r24, r17
 160:	d2 df       	rcall	.-92     	; 0x106 <LCD_Cursor>
 162:	89 91       	ld	r24, Y+
 164:	e7 df       	rcall	.-50     	; 0x134 <LCD_WriteData>
 166:	10 2f       	mov	r17, r16
 168:	88 81       	ld	r24, Y
 16a:	81 11       	cpse	r24, r1
 16c:	f6 cf       	rjmp	.-20     	; 0x15a <LCD_DisplayString+0x14>
 16e:	df 91       	pop	r29
 170:	cf 91       	pop	r28
 172:	1f 91       	pop	r17
 174:	0f 91       	pop	r16
 176:	08 95       	ret

00000178 <TimerOn>:
 178:	8b e0       	ldi	r24, 0x0B	; 11
 17a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 17e:	8d e7       	ldi	r24, 0x7D	; 125
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 186:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 18a:	82 e0       	ldi	r24, 0x02	; 2
 18c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 190:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 194:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 198:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <_avr_timer_M>
 19c:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <_avr_timer_M+0x1>
 1a0:	a0 91 03 01 	lds	r26, 0x0103	; 0x800103 <_avr_timer_M+0x2>
 1a4:	b0 91 04 01 	lds	r27, 0x0104	; 0x800104 <_avr_timer_M+0x3>
 1a8:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <_avr_timer_cntcurr>
 1ac:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <_avr_timer_cntcurr+0x1>
 1b0:	a0 93 26 01 	sts	0x0126, r26	; 0x800126 <_avr_timer_cntcurr+0x2>
 1b4:	b0 93 27 01 	sts	0x0127, r27	; 0x800127 <_avr_timer_cntcurr+0x3>
 1b8:	8f b7       	in	r24, 0x3f	; 63
 1ba:	80 68       	ori	r24, 0x80	; 128
 1bc:	8f bf       	out	0x3f, r24	; 63
 1be:	08 95       	ret

000001c0 <__vector_13>:
}

//In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect)
{
 1c0:	1f 92       	push	r1
 1c2:	0f 92       	push	r0
 1c4:	0f b6       	in	r0, 0x3f	; 63
 1c6:	0f 92       	push	r0
 1c8:	11 24       	eor	r1, r1
 1ca:	8f 93       	push	r24
 1cc:	9f 93       	push	r25
 1ce:	af 93       	push	r26
 1d0:	bf 93       	push	r27
	//CPU automatically calls when TCNT1 == OCR1 (every 1ms per TimerOn settings)
	_avr_timer_cntcurr--;	//count down to 0 rather than up to TOP
 1d2:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <_avr_timer_cntcurr>
 1d6:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <_avr_timer_cntcurr+0x1>
 1da:	a0 91 26 01 	lds	r26, 0x0126	; 0x800126 <_avr_timer_cntcurr+0x2>
 1de:	b0 91 27 01 	lds	r27, 0x0127	; 0x800127 <_avr_timer_cntcurr+0x3>
 1e2:	01 97       	sbiw	r24, 0x01	; 1
 1e4:	a1 09       	sbc	r26, r1
 1e6:	b1 09       	sbc	r27, r1
 1e8:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <_avr_timer_cntcurr>
 1ec:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <_avr_timer_cntcurr+0x1>
 1f0:	a0 93 26 01 	sts	0x0126, r26	; 0x800126 <_avr_timer_cntcurr+0x2>
 1f4:	b0 93 27 01 	sts	0x0127, r27	; 0x800127 <_avr_timer_cntcurr+0x3>
	if(_avr_timer_cntcurr == 0)
 1f8:	89 2b       	or	r24, r25
 1fa:	8a 2b       	or	r24, r26
 1fc:	8b 2b       	or	r24, r27
 1fe:	99 f4       	brne	.+38     	; 0x226 <__vector_13+0x66>
	TCCR1B = 0x00;	// bit3bit1bit0 = 000: timer off
}

void TimerISR()
{
	TimerFlag = 1;
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <TimerFlag>
	//CPU automatically calls when TCNT1 == OCR1 (every 1ms per TimerOn settings)
	_avr_timer_cntcurr--;	//count down to 0 rather than up to TOP
	if(_avr_timer_cntcurr == 0)
	{
		TimerISR();
		_avr_timer_cntcurr = _avr_timer_M;
 206:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <_avr_timer_M>
 20a:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <_avr_timer_M+0x1>
 20e:	a0 91 03 01 	lds	r26, 0x0103	; 0x800103 <_avr_timer_M+0x2>
 212:	b0 91 04 01 	lds	r27, 0x0104	; 0x800104 <_avr_timer_M+0x3>
 216:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <_avr_timer_cntcurr>
 21a:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <_avr_timer_cntcurr+0x1>
 21e:	a0 93 26 01 	sts	0x0126, r26	; 0x800126 <_avr_timer_cntcurr+0x2>
 222:	b0 93 27 01 	sts	0x0127, r27	; 0x800127 <_avr_timer_cntcurr+0x3>
	}
}
 226:	bf 91       	pop	r27
 228:	af 91       	pop	r26
 22a:	9f 91       	pop	r25
 22c:	8f 91       	pop	r24
 22e:	0f 90       	pop	r0
 230:	0f be       	out	0x3f, r0	; 63
 232:	0f 90       	pop	r0
 234:	1f 90       	pop	r1
 236:	18 95       	reti

00000238 <TimerSet>:

//Set TimerISR() to tick every M ms
void TimerSet(unsigned long M)
{
	_avr_timer_M = M;
 238:	60 93 01 01 	sts	0x0101, r22	; 0x800101 <_avr_timer_M>
 23c:	70 93 02 01 	sts	0x0102, r23	; 0x800102 <_avr_timer_M+0x1>
 240:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <_avr_timer_M+0x2>
 244:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <_avr_timer_M+0x3>
	_avr_timer_cntcurr = _avr_timer_M;
 248:	60 93 24 01 	sts	0x0124, r22	; 0x800124 <_avr_timer_cntcurr>
 24c:	70 93 25 01 	sts	0x0125, r23	; 0x800125 <_avr_timer_cntcurr+0x1>
 250:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <_avr_timer_cntcurr+0x2>
 254:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <_avr_timer_cntcurr+0x3>
 258:	08 95       	ret

0000025a <Tick>:
unsigned char cnt = 0x00;
unsigned char score = 0x05;

void Tick()
{
	switch(state)
 25a:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <state>
 25e:	82 30       	cpi	r24, 0x02	; 2
 260:	09 f4       	brne	.+2      	; 0x264 <Tick+0xa>
 262:	79 c0       	rjmp	.+242    	; 0x356 <Tick+0xfc>
 264:	30 f4       	brcc	.+12     	; 0x272 <Tick+0x18>
 266:	88 23       	and	r24, r24
 268:	59 f0       	breq	.+22     	; 0x280 <Tick+0x26>
 26a:	81 30       	cpi	r24, 0x01	; 1
 26c:	09 f4       	brne	.+2      	; 0x270 <Tick+0x16>
 26e:	36 c0       	rjmp	.+108    	; 0x2dc <Tick+0x82>
 270:	c0 c0       	rjmp	.+384    	; 0x3f2 <Tick+0x198>
 272:	83 30       	cpi	r24, 0x03	; 3
 274:	09 f4       	brne	.+2      	; 0x278 <Tick+0x1e>
 276:	ad c0       	rjmp	.+346    	; 0x3d2 <Tick+0x178>
 278:	84 30       	cpi	r24, 0x04	; 4
 27a:	09 f4       	brne	.+2      	; 0x27e <Tick+0x24>
 27c:	b2 c0       	rjmp	.+356    	; 0x3e2 <Tick+0x188>
 27e:	b9 c0       	rjmp	.+370    	; 0x3f2 <Tick+0x198>
	{//state transition
		case Init:
		if(button)
 280:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <button>
 284:	81 11       	cpse	r24, r1
 286:	00 c1       	rjmp	.+512    	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
		{
			state = Init;
		}
		else
		{
			state = next_led;
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <state>
			cnt = 0x00;
 28e:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <__data_end>
			tmpB = 0x01;
 292:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <tmpB>
			if(score == 0x09)
 296:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 29a:	89 30       	cpi	r24, 0x09	; 9
 29c:	59 f4       	brne	.+22     	; 0x2b4 <Tick+0x5a>
			{
				LCD_ClearScreen();
 29e:	30 df       	rcall	.-416    	; 0x100 <LCD_ClearScreen>
				score = 0x05;
 2a0:	85 e0       	ldi	r24, 0x05	; 5
 2a2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
				LCD_Cursor(1);
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	2e df       	rcall	.-420    	; 0x106 <LCD_Cursor>
				LCD_WriteData(score + '0');
 2aa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 2ae:	80 5d       	subi	r24, 0xD0	; 208
 2b0:	41 df       	rcall	.-382    	; 0x134 <LCD_WriteData>
 2b2:	9f c0       	rjmp	.+318    	; 0x3f2 <Tick+0x198>
			}
			else if(score == 0x00)
 2b4:	81 11       	cpse	r24, r1
 2b6:	0b c0       	rjmp	.+22     	; 0x2ce <Tick+0x74>
			{
				LCD_ClearScreen();
 2b8:	23 df       	rcall	.-442    	; 0x100 <LCD_ClearScreen>
 2ba:	85 e0       	ldi	r24, 0x05	; 5
				score = 0x05;
 2bc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
				LCD_Cursor(1);
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	21 df       	rcall	.-446    	; 0x106 <LCD_Cursor>
				LCD_WriteData(score + '0');
 2c4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 2c8:	80 5d       	subi	r24, 0xD0	; 208
 2ca:	34 df       	rcall	.-408    	; 0x134 <LCD_WriteData>
 2cc:	92 c0       	rjmp	.+292    	; 0x3f2 <Tick+0x198>
			}
			
			else
			{
				LCD_Cursor(1);
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	1a df       	rcall	.-460    	; 0x106 <LCD_Cursor>
 2d2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
				LCD_WriteData(score + '0');
 2d6:	80 5d       	subi	r24, 0xD0	; 208
 2d8:	2d df       	rcall	.-422    	; 0x134 <LCD_WriteData>
 2da:	8b c0       	rjmp	.+278    	; 0x3f2 <Tick+0x198>
 2dc:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <tmpB>
			}
		}
		break;
		
		case next_led:
		if((tmpB == 0x04) && (cnt == 0x0A))
 2e0:	84 30       	cpi	r24, 0x04	; 4
 2e2:	61 f4       	brne	.+24     	; 0x2fc <Tick+0xa2>
 2e4:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
 2e8:	8a 30       	cpi	r24, 0x0A	; 10
 2ea:	09 f0       	breq	.+2      	; 0x2ee <Tick+0x94>
 2ec:	bf c0       	rjmp	.+382    	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
 2ee:	82 e0       	ldi	r24, 0x02	; 2
 2f0:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <state>
		{
			state = prev_led;
 2f4:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <tmpB>
			tmpB = tmpB >> 1;
 2f8:	80 e0       	ldi	r24, 0x00	; 0
 2fa:	a0 c0       	rjmp	.+320    	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
			cnt++;
		}
		break;
		
		case prev_led:
		if(cnt == 0x0A)
 2fc:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <button>
		{
			state = prev_led;
			tmpB = tmpB >> 1;
			cnt = 0;
		}
		else if(button)
 300:	99 23       	and	r25, r25
 302:	09 f4       	brne	.+2      	; 0x306 <Tick+0xac>
 304:	7f c0       	rjmp	.+254    	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 306:	93 e0       	ldi	r25, 0x03	; 3
 308:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <state>
		{
			state = stay_pr;
 30c:	82 30       	cpi	r24, 0x02	; 2
 30e:	71 f4       	brne	.+28     	; 0x32c <Tick+0xd2>
			if((tmpB == 0x02) && (score < 0x09))
 310:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 314:	89 30       	cpi	r24, 0x09	; 9
 316:	c0 f4       	brcc	.+48     	; 0x348 <Tick+0xee>
 318:	8f 5f       	subi	r24, 0xFF	; 255
			{
				score++;
 31a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
				LCD_Cursor(1);
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	f2 de       	rcall	.-540    	; 0x106 <LCD_Cursor>
 322:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
				LCD_WriteData(score + '0');
 326:	80 5d       	subi	r24, 0xD0	; 208
 328:	05 df       	rcall	.-502    	; 0x134 <LCD_WriteData>
 32a:	63 c0       	rjmp	.+198    	; 0x3f2 <Tick+0x198>
 32c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
			}
			else if((tmpB != 0x02) && (score > 0x00))
 330:	88 23       	and	r24, r24
 332:	51 f0       	breq	.+20     	; 0x348 <Tick+0xee>
			{
				score--;
 334:	81 50       	subi	r24, 0x01	; 1
 336:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
				LCD_Cursor(1);
 33a:	81 e0       	ldi	r24, 0x01	; 1
				LCD_WriteData(score + '0');
 33c:	e4 de       	rcall	.-568    	; 0x106 <LCD_Cursor>
 33e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 342:	80 5d       	subi	r24, 0xD0	; 208
 344:	f7 de       	rcall	.-530    	; 0x134 <LCD_WriteData>
 346:	55 c0       	rjmp	.+170    	; 0x3f2 <Tick+0x198>
			}
			else
			{
				LCD_Cursor(1);
 348:	81 e0       	ldi	r24, 0x01	; 1
 34a:	dd de       	rcall	.-582    	; 0x106 <LCD_Cursor>
 34c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
				LCD_WriteData(score + '0');
 350:	80 5d       	subi	r24, 0xD0	; 208
 352:	f0 de       	rcall	.-544    	; 0x134 <LCD_WriteData>
 354:	4e c0       	rjmp	.+156    	; 0x3f2 <Tick+0x198>
 356:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <tmpB>
			state = next_led;
		}
		break;
		
		case prev_led:
		if((tmpB == 0x01) && (cnt == 0x0A))
 35a:	81 30       	cpi	r24, 0x01	; 1
 35c:	69 f4       	brne	.+26     	; 0x378 <Tick+0x11e>
 35e:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
 362:	8a 30       	cpi	r24, 0x0A	; 10
 364:	09 f0       	breq	.+2      	; 0x368 <Tick+0x10e>
 366:	8b c0       	rjmp	.+278    	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 368:	81 e0       	ldi	r24, 0x01	; 1
 36a:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <state>
		{
			state = next_led;
 36e:	82 e0       	ldi	r24, 0x02	; 2
 370:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <tmpB>
			tmpB = tmpB << 1;
 374:	80 e0       	ldi	r24, 0x00	; 0
 376:	52 c0       	rjmp	.+164    	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
	{//state action
		case Init:
		break;
		
		case next_led:
		if(cnt == 0x0A)
 378:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <button>
		{
			state = next_led;
			tmpB = tmpB << 1;
			cnt = 0;
		}
		else if(button)
 37c:	99 23       	and	r25, r25
 37e:	09 f4       	brne	.+2      	; 0x382 <Tick+0x128>
 380:	51 c0       	rjmp	.+162    	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 382:	93 e0       	ldi	r25, 0x03	; 3
		{
			state = stay_pr;
 384:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <state>
 388:	82 30       	cpi	r24, 0x02	; 2
			if((tmpB == 0x02) && (score < 0x09))
 38a:	71 f4       	brne	.+28     	; 0x3a8 <Tick+0x14e>
 38c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 390:	89 30       	cpi	r24, 0x09	; 9
 392:	c0 f4       	brcc	.+48     	; 0x3c4 <Tick+0x16a>
			{
				score++;
 394:	8f 5f       	subi	r24, 0xFF	; 255
 396:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
				LCD_Cursor(1);
 39a:	81 e0       	ldi	r24, 0x01	; 1
 39c:	b4 de       	rcall	.-664    	; 0x106 <LCD_Cursor>
				LCD_WriteData(score + '0');
 39e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 3a2:	80 5d       	subi	r24, 0xD0	; 208
 3a4:	c7 de       	rcall	.-626    	; 0x134 <LCD_WriteData>
 3a6:	25 c0       	rjmp	.+74     	; 0x3f2 <Tick+0x198>
			}
			else if((tmpB != 0x02) && (score > 0x00))
 3a8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 3ac:	88 23       	and	r24, r24
			{
				score--;
 3ae:	51 f0       	breq	.+20     	; 0x3c4 <Tick+0x16a>
 3b0:	81 50       	subi	r24, 0x01	; 1
 3b2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
				LCD_Cursor(1);
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	a6 de       	rcall	.-692    	; 0x106 <LCD_Cursor>
				LCD_WriteData(score + '0');
 3ba:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 3be:	80 5d       	subi	r24, 0xD0	; 208
 3c0:	b9 de       	rcall	.-654    	; 0x134 <LCD_WriteData>
 3c2:	17 c0       	rjmp	.+46     	; 0x3f2 <Tick+0x198>
 3c4:	81 e0       	ldi	r24, 0x01	; 1
			}
			else
			{
				LCD_Cursor(1);
 3c6:	9f de       	rcall	.-706    	; 0x106 <LCD_Cursor>
 3c8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
				LCD_WriteData(score + '0');
 3cc:	80 5d       	subi	r24, 0xD0	; 208
 3ce:	b2 de       	rcall	.-668    	; 0x134 <LCD_WriteData>
 3d0:	10 c0       	rjmp	.+32     	; 0x3f2 <Tick+0x198>
 3d2:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <button>
				break;
 3d6:	81 11       	cpse	r24, r1
			state = prev_led;
		}
		break;
		
		case stay_pr:
		if(!button)
 3d8:	35 c0       	rjmp	.+106    	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 3da:	84 e0       	ldi	r24, 0x04	; 4
 3dc:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <state>
		{
			state = released;
 3e0:	08 95       	ret
 3e2:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <button>
 3e6:	88 23       	and	r24, r24
			state = stay_pr;
		}
		break;
		
		case released:
		if(button)
 3e8:	09 f4       	brne	.+2      	; 0x3ec <Tick+0x192>
 3ea:	4e c0       	rjmp	.+156    	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
 3ec:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <state>
 3f0:	08 95       	ret
		{
			state = Init;
 3f2:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <state>
 3f6:	82 30       	cpi	r24, 0x02	; 2
		
		default:
		break;
	}
	
	switch(state)
 3f8:	a9 f0       	breq	.+42     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 3fa:	83 30       	cpi	r24, 0x03	; 3
 3fc:	19 f1       	breq	.+70     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 3fe:	81 30       	cpi	r24, 0x01	; 1
 400:	09 f0       	breq	.+2      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 402:	42 c0       	rjmp	.+132    	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
 404:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
 408:	8a 30       	cpi	r24, 0x0A	; 10
	{//state action
		case Init:
		break;
		
		case next_led:
		if(cnt == 0x0A)
 40a:	41 f4       	brne	.+16     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 40c:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <tmpB>
 410:	88 0f       	add	r24, r24
		{
			tmpB = tmpB << 1;
 412:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <tmpB>
 416:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <__data_end>
 41a:	08 95       	ret
			cnt = 0;
 41c:	8f 5f       	subi	r24, 0xFF	; 255
 41e:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__data_end>
		}
		else
		{
			cnt++;
 422:	08 95       	ret
 424:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
 428:	8a 30       	cpi	r24, 0x0A	; 10
		}
		break;
		
		case prev_led:
		if(cnt == 0x0A)
 42a:	41 f4       	brne	.+16     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 42c:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <tmpB>
		{
			tmpB = tmpB >> 1;
 430:	86 95       	lsr	r24
 432:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <tmpB>
 436:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <__data_end>
			cnt = 0;
 43a:	08 95       	ret
 43c:	8f 5f       	subi	r24, 0xFF	; 255
		}
		else
		{
			cnt++;
 43e:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__data_end>
 442:	08 95       	ret
 444:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
		}
		break;
		
		case stay_pr:
		if(score == 0x09)
 448:	89 30       	cpi	r24, 0x09	; 9
 44a:	29 f4       	brne	.+10     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 44c:	65 e0       	ldi	r22, 0x05	; 5
		{
			LCD_DisplayString(1, "Victory");
 44e:	71 e0       	ldi	r23, 0x01	; 1
 450:	81 e0       	ldi	r24, 0x01	; 1
 452:	79 ce       	rjmp	.-782    	; 0x146 <LCD_DisplayString>
 454:	08 95       	ret
 456:	81 11       	cpse	r24, r1
 458:	17 c0       	rjmp	.+46     	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
		}
		else if(score == 0x00)
 45a:	6d e0       	ldi	r22, 0x0D	; 13
 45c:	71 e0       	ldi	r23, 0x01	; 1
		{
			LCD_DisplayString(1, "WAKE UP, HELLO???");
 45e:	81 e0       	ldi	r24, 0x01	; 1
 460:	72 ce       	rjmp	.-796    	; 0x146 <LCD_DisplayString>
 462:	08 95       	ret
 464:	83 e0       	ldi	r24, 0x03	; 3
 466:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <state>
			tmpB = tmpB >> 1;
			cnt = 0;
		}
		else if(button)
		{
			state = stay_pr;
 46a:	60 cf       	rjmp	.-320    	; 0x32c <Tick+0xd2>
 46c:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <button>
 470:	81 11       	cpse	r24, r1
		{
			state = prev_led;
			tmpB = tmpB >> 1;
			cnt = 0;
		}
		else if(button)
 472:	f8 cf       	rjmp	.-16     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 474:	c7 cf       	rjmp	.-114    	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 476:	83 e0       	ldi	r24, 0x03	; 3
 478:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <state>
			tmpB = tmpB << 1;
			cnt = 0;
		}
		else if(button)
		{
			state = stay_pr;
 47c:	95 cf       	rjmp	.-214    	; 0x3a8 <Tick+0x14e>
 47e:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <button>
 482:	81 11       	cpse	r24, r1
		{
			state = next_led;
			tmpB = tmpB << 1;
			cnt = 0;
		}
		else if(button)
 484:	f8 cf       	rjmp	.-16     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
 486:	ce cf       	rjmp	.-100    	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 488:	08 95       	ret

0000048a <main>:
 48a:	11 b8       	out	0x01, r1	; 1
 48c:	8f ef       	ldi	r24, 0xFF	; 255
 48e:	82 b9       	out	0x02, r24	; 2

void main()
{
	
	DDRA = 0x00;	PORTA = 0xFF;
	DDRB = 0xFF;	PORTB = 0x00;
 490:	84 b9       	out	0x04, r24	; 4
 492:	15 b8       	out	0x05, r1	; 5
	DDRC = 0xFF;	PORTC = 0x00;
 494:	87 b9       	out	0x07, r24	; 7
 496:	18 b8       	out	0x08, r1	; 8
	DDRD = 0xFF;	PORTD = 0x00;
 498:	8a b9       	out	0x0a, r24	; 10
 49a:	1b b8       	out	0x0b, r1	; 11
	
	TimerSet(30);
 49c:	6e e1       	ldi	r22, 0x1E	; 30
 49e:	70 e0       	ldi	r23, 0x00	; 0
 4a0:	80 e0       	ldi	r24, 0x00	; 0
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	c9 de       	rcall	.-622    	; 0x238 <TimerSet>
	TimerOn();
 4a6:	68 de       	rcall	.-816    	; 0x178 <TimerOn>
 4a8:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <state>
	
	state = Init;
	LCD_init();
 4ac:	34 de       	rcall	.-920    	; 0x116 <LCD_init>
 4ae:	80 b1       	in	r24, 0x00	; 0
	
	while (1)
	{
		button = ~PINA;
 4b0:	80 95       	com	r24
 4b2:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <button>
		Tick();
 4b6:	d1 de       	rcall	.-606    	; 0x25a <Tick>
 4b8:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <TimerFlag>
		while(!TimerFlag){}
 4bc:	88 23       	and	r24, r24
 4be:	e1 f3       	breq	.-8      	; 0x4b8 <main+0x2e>
 4c0:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <TimerFlag>
		TimerFlag = 0;
 4c4:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <tmpB>
		PORTB = tmpB;
 4c8:	85 b9       	out	0x05, r24	; 5
 4ca:	f1 cf       	rjmp	.-30     	; 0x4ae <main+0x24>

000004cc <_exit>:
	}
 4cc:	f8 94       	cli

000004ce <__stop_program>:
 4ce:	ff cf       	rjmp	.-2      	; 0x4ce <__stop_program>
